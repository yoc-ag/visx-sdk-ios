// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios12.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VisxSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import AdSupport
import AppTrackingTransparency
import CommonCrypto
import CoreLocation
import CoreVideo
import Foundation
import MediaPlayer
import MessageUI
import Photos
import Swift
import UIKit
@_exported import VisxSDK
import WebKit
import _Concurrency
import _StringProcessing
@available(iOS 9.0, macOS 10.11, *)
extension UIKit.UILayoutGuide {
  @_Concurrency.MainActor(unsafe) public var snp: VisxSDK.ConstraintLayoutGuideDSL {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LayoutConstraint : UIKit.NSLayoutConstraint {
  @_Concurrency.MainActor(unsafe) public var label: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public protocol ConstraintInsetTarget : VisxSDK.ConstraintConstantTarget {
}
extension Swift.Int : VisxSDK.ConstraintInsetTarget {
}
extension Swift.UInt : VisxSDK.ConstraintInsetTarget {
}
extension Swift.Float : VisxSDK.ConstraintInsetTarget {
}
extension Swift.Double : VisxSDK.ConstraintInsetTarget {
}
extension CoreFoundation.CGFloat : VisxSDK.ConstraintInsetTarget {
}
extension UIKit.UIEdgeInsets : VisxSDK.ConstraintInsetTarget {
}
public protocol ConstraintOffsetTarget : VisxSDK.ConstraintConstantTarget {
}
extension Swift.Int : VisxSDK.ConstraintOffsetTarget {
}
extension Swift.UInt : VisxSDK.ConstraintOffsetTarget {
}
extension Swift.Float : VisxSDK.ConstraintOffsetTarget {
}
extension Swift.Double : VisxSDK.ConstraintOffsetTarget {
}
extension CoreFoundation.CGFloat : VisxSDK.ConstraintOffsetTarget {
}
@_hasMissingDesignatedInitializers public class ConstraintMakerFinalizable {
  @discardableResult
  public func labeled(_ label: Swift.String) -> VisxSDK.ConstraintMakerFinalizable
  public var constraint: VisxSDK.Constraint {
    get
  }
  @objc deinit
}
public typealias ConstraintInsets = UIKit.UIEdgeInsets
public protocol ConstraintDirectionalInsetTarget : VisxSDK.ConstraintConstantTarget {
}
@available(iOS 11.0, tvOS 11.0, *)
extension UIKit.NSDirectionalEdgeInsets : VisxSDK.ConstraintDirectionalInsetTarget {
}
extension AVKit.AVPlayerViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
}
public struct ConstraintViewDSL : VisxSDK.ConstraintAttributesDSL {
  @discardableResult
  public func prepareConstraints(_ closure: (_ make: VisxSDK.ConstraintMaker) -> Swift.Void) -> [VisxSDK.Constraint]
  public func makeConstraints(_ closure: (_ make: VisxSDK.ConstraintMaker) -> Swift.Void)
  public func remakeConstraints(_ closure: (_ make: VisxSDK.ConstraintMaker) -> Swift.Void)
  public func updateConstraints(_ closure: (_ make: VisxSDK.ConstraintMaker) -> Swift.Void)
  public func removeConstraints()
  public var contentHuggingHorizontalPriority: Swift.Float {
    get
    nonmutating set
  }
  public var contentHuggingVerticalPriority: Swift.Float {
    get
    nonmutating set
  }
  public var contentCompressionResistanceHorizontalPriority: Swift.Float {
    get
    nonmutating set
  }
  public var contentCompressionResistanceVerticalPriority: Swift.Float {
    get
    nonmutating set
  }
  public var target: Swift.AnyObject? {
    get
  }
}
public protocol ConstraintDSL {
  var target: Swift.AnyObject? { get }
  func setLabel(_ value: Swift.String?)
  func label() -> Swift.String?
}
extension VisxSDK.ConstraintDSL {
  public func setLabel(_ value: Swift.String?)
  public func label() -> Swift.String?
}
public protocol ConstraintBasicAttributesDSL : VisxSDK.ConstraintDSL {
}
extension VisxSDK.ConstraintBasicAttributesDSL {
  public var left: VisxSDK.ConstraintItem {
    get
  }
  public var top: VisxSDK.ConstraintItem {
    get
  }
  public var right: VisxSDK.ConstraintItem {
    get
  }
  public var bottom: VisxSDK.ConstraintItem {
    get
  }
  public var leading: VisxSDK.ConstraintItem {
    get
  }
  public var trailing: VisxSDK.ConstraintItem {
    get
  }
  public var width: VisxSDK.ConstraintItem {
    get
  }
  public var height: VisxSDK.ConstraintItem {
    get
  }
  public var centerX: VisxSDK.ConstraintItem {
    get
  }
  public var centerY: VisxSDK.ConstraintItem {
    get
  }
  public var edges: VisxSDK.ConstraintItem {
    get
  }
  public var directionalEdges: VisxSDK.ConstraintItem {
    get
  }
  public var horizontalEdges: VisxSDK.ConstraintItem {
    get
  }
  public var verticalEdges: VisxSDK.ConstraintItem {
    get
  }
  public var directionalHorizontalEdges: VisxSDK.ConstraintItem {
    get
  }
  public var directionalVerticalEdges: VisxSDK.ConstraintItem {
    get
  }
  public var size: VisxSDK.ConstraintItem {
    get
  }
  public var center: VisxSDK.ConstraintItem {
    get
  }
}
public protocol ConstraintAttributesDSL : VisxSDK.ConstraintBasicAttributesDSL {
}
extension VisxSDK.ConstraintAttributesDSL {
  @available(*, deprecated, renamed: "lastBaseline")
  public var baseline: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  public var lastBaseline: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  public var firstBaseline: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var leftMargin: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var topMargin: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var rightMargin: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var bottomMargin: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var leadingMargin: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var trailingMargin: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var centerXWithinMargins: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var centerYWithinMargins: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var margins: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var directionalMargins: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var centerWithinMargins: VisxSDK.ConstraintItem {
    get
  }
}
public protocol ConstraintRelatableTarget {
}
extension Swift.Int : VisxSDK.ConstraintRelatableTarget {
}
extension Swift.UInt : VisxSDK.ConstraintRelatableTarget {
}
extension Swift.Float : VisxSDK.ConstraintRelatableTarget {
}
extension Swift.Double : VisxSDK.ConstraintRelatableTarget {
}
extension CoreFoundation.CGFloat : VisxSDK.ConstraintRelatableTarget {
}
extension CoreFoundation.CGSize : VisxSDK.ConstraintRelatableTarget {
}
extension CoreFoundation.CGPoint : VisxSDK.ConstraintRelatableTarget {
}
extension UIKit.UIEdgeInsets : VisxSDK.ConstraintRelatableTarget {
}
@available(iOS 11.0, tvOS 11.0, *)
extension UIKit.NSDirectionalEdgeInsets : VisxSDK.ConstraintRelatableTarget {
}
extension VisxSDK.ConstraintItem : VisxSDK.ConstraintRelatableTarget {
}
extension UIKit.UIView : VisxSDK.ConstraintRelatableTarget {
}
@available(iOS 9.0, macOS 10.11, *)
extension UIKit.UILayoutGuide : VisxSDK.ConstraintRelatableTarget {
}
public enum VisxDeviceModel : Swift.String {
  case simulator, iPod1, iPod2, iPod3, iPod4, iPod5, iPod6, iPod7, iPad2, iPad3, iPad4, iPadAir, iPadAir2, iPadAir3, iPadAir4, iPadAir5, iPad5, iPad6, iPad7, iPad8, iPad9, iPadMini, iPadMini2, iPadMini3, iPadMini4, iPadMini5, iPadMini6, iPadPro9_7, iPadPro10_5, iPadPro11, iPadPro2_11, iPadPro3_11, iPadPro12_9, iPadPro2_12_9, iPadPro3_12_9, iPadPro4_12_9, iPadPro5_12_9, iPhone4, iPhone4S, iPhone5, iPhone5S, iPhone5C, iPhone6, iPhone6Plus, iPhone6S, iPhone6SPlus, iPhoneSE, iPhone7, iPhone7Plus, iPhone8, iPhone8Plus, iPhoneX, iPhoneXS, iPhoneXSMax, iPhoneXR, iPhone11, iPhone11Pro, iPhone11ProMax, iPhoneSE2, iPhone12Mini, iPhone12, iPhone12Pro, iPhone12ProMax, iPhone13Mini, iPhone13, iPhone13Pro, iPhone13ProMax, iPhoneSE3, iPhone14, iPhone14Plus, iPhone14Pro, iPhone14ProMax, AppleWatch1, AppleWatchS1, AppleWatchS2, AppleWatchS3, AppleWatchS4, AppleWatchS5, AppleWatchSE, AppleWatchS6, AppleWatchS7, AppleTV1, AppleTV2, AppleTV3, AppleTV4, AppleTV_4K, AppleTV2_4K, unrecognized
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var type: VisxSDK.VisxDeviceModel {
    get
  }
}
@available(iOS 9.0, macOS 10.11, *)
public struct ConstraintLayoutGuideDSL : VisxSDK.ConstraintAttributesDSL {
  @discardableResult
  public func prepareConstraints(_ closure: (_ make: VisxSDK.ConstraintMaker) -> Swift.Void) -> [VisxSDK.Constraint]
  public func makeConstraints(_ closure: (_ make: VisxSDK.ConstraintMaker) -> Swift.Void)
  public func remakeConstraints(_ closure: (_ make: VisxSDK.ConstraintMaker) -> Swift.Void)
  public func updateConstraints(_ closure: (_ make: VisxSDK.ConstraintMaker) -> Swift.Void)
  public func removeConstraints()
  public var target: Swift.AnyObject? {
    get
  }
}
@_inheritsConvenienceInitializers @objc(VisxSDKManager) public class VisxSDKManager : ObjectiveC.NSObject {
  @objc public class func sharedInstance() -> VisxSDK.VisxSDKManager
  @objc public func initializeSDK()
  @objc public func SDKVersion() -> Swift.String
  @objc public func setRemoteConfigSiteId(with siteId: Swift.String)
  @objc public func setSharedNamespace(uuid namespace: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Constraint {
  final public var layoutConstraints: [VisxSDK.LayoutConstraint]
  final public var isActive: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, renamed: "activate()")
  final public func install()
  @available(*, deprecated, renamed: "deactivate()")
  final public func uninstall()
  final public func activate()
  final public func deactivate()
  @discardableResult
  final public func update(offset: any VisxSDK.ConstraintOffsetTarget) -> VisxSDK.Constraint
  @discardableResult
  final public func update(inset: any VisxSDK.ConstraintInsetTarget) -> VisxSDK.Constraint
  @available(iOS 11.0, tvOS 11.0, *)
  @discardableResult
  final public func update(inset: any VisxSDK.ConstraintDirectionalInsetTarget) -> VisxSDK.Constraint
  @discardableResult
  final public func update(priority: any VisxSDK.ConstraintPriorityTarget) -> VisxSDK.Constraint
  @discardableResult
  final public func update(priority: VisxSDK.ConstraintPriority) -> VisxSDK.Constraint
  @available(*, deprecated, renamed: "update(offset:)")
  final public func updateOffset(amount: any VisxSDK.ConstraintOffsetTarget)
  @available(*, deprecated, renamed: "update(inset:)")
  final public func updateInsets(amount: any VisxSDK.ConstraintInsetTarget)
  @available(*, deprecated, renamed: "update(priority:)")
  final public func updatePriority(amount: any VisxSDK.ConstraintPriorityTarget)
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityRequired()
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityHigh()
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityMedium()
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityLow()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ConstraintMaker {
  public var left: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var top: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var bottom: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var right: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var leading: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var trailing: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var width: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var height: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var centerX: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var centerY: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(*, deprecated, renamed: "lastBaseline")
  public var baseline: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var lastBaseline: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  public var firstBaseline: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leftMargin: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var rightMargin: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var topMargin: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var bottomMargin: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leadingMargin: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var trailingMargin: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerXWithinMargins: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerYWithinMargins: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var edges: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var horizontalEdges: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var verticalEdges: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var directionalEdges: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var directionalHorizontalEdges: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var directionalVerticalEdges: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var size: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var center: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var margins: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var directionalMargins: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerWithinMargins: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ConstraintDescription {
  @objc deinit
}
@available(iOS 8.0, *)
extension UIKit.UILayoutSupport {
  @_Concurrency.MainActor(unsafe) public var snp: VisxSDK.ConstraintLayoutSupportDSL {
    get
  }
}
@available(iOS 8.0, *)
public typealias ConstraintLayoutSupport = UIKit.UILayoutSupport
@objc public enum VisxPlacementType : Swift.Int {
  case inline = 0
  case interstitial = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum VisxPlacementEffect : Swift.Int, Swift.Codable {
  case fullscreenOverlay
  case sitebar
  case sticky
  case inlineToSticky
  case understitialMini
  case understitialMiniToSticky
  case zoom
  case zoomToSticky
  case none
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol ConstraintPriorityTarget {
  var constraintPriorityTargetValue: Swift.Float { get }
}
extension Swift.Int : VisxSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension Swift.UInt : VisxSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension Swift.Float : VisxSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension Swift.Double : VisxSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension CoreFoundation.CGFloat : VisxSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension UIKit.UILayoutPriority : VisxSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension VisxSDK.LayoutConstraint {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc @_hasMissingDesignatedInitializers public class Mediation : ObjectiveC.NSObject {
  public var className: Swift.String? {
    get
  }
  public var adunit: Swift.String? {
    get
  }
  public var sizes: [[Swift.Int]]? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VisxAdCallbackHandler {
  @discardableResult
  public func onInitialize(_ callback: @escaping (VisxSDK.VisxAdView, VisxSDK.VisxPlacementEffect) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onError(_ callback: @escaping (VisxSDK.VisxAdView, any Swift.Error) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onRequestStarted(_ callback: @escaping (VisxSDK.VisxAdView) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onResponseReceived(_ callback: @escaping (VisxSDK.VisxAdView, Foundation.Decimal, Swift.String) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onSizeChange(_ callback: @escaping (VisxSDK.VisxAdView, CoreFoundation.CGFloat, CoreFoundation.CGFloat) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onEffectChange(_ callback: @escaping (VisxSDK.VisxAdView, VisxSDK.VisxPlacementEffect) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onClose(_ callback: @escaping (VisxSDK.VisxAdView) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onClick(_ callback: @escaping (VisxSDK.VisxAdView) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onLandingPageOpen(_ callback: @escaping () -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onSuspend(_ callback: @escaping (VisxSDK.VisxAdView) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onResume(_ callback: @escaping (VisxSDK.VisxAdView) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onVideoFinish(_ callback: @escaping (VisxSDK.VisxAdView) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onInterstitialWillClose(_ callback: @escaping (VisxSDK.VisxAdView) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onInterstitialDidClose(_ callback: @escaping (VisxSDK.VisxAdView) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onStickyOpen(_ callback: @escaping (VisxSDK.VisxAdView) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onStickyWillClose(_ callback: @escaping (VisxSDK.VisxAdView) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @discardableResult
  public func onStickyDidClose(_ callback: @escaping (VisxSDK.VisxAdView) -> Swift.Void) -> VisxSDK.VisxAdCallbackHandler
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class VisxMediationUtils : ObjectiveC.NSObject {
  @objc public class func topMostController() -> UIKit.UIViewController?
  @objc public class func visxGetAdSizeFromString(serverParameter: Swift.String) -> CoreFoundation.CGSize
  @objc public class func visxGoogleAdUpdatedViewString() -> Swift.String
  @objc public class func visxGetAUIDFromString(serverParameter: Swift.String) -> Swift.String
  @objc public class func visxGetAppDomainFromString(serverParameter: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public protocol ConstraintMultiplierTarget {
  var constraintMultiplierTargetValue: CoreFoundation.CGFloat { get }
}
extension Swift.Int : VisxSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.UInt : VisxSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.Float : VisxSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.Double : VisxSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
extension CoreFoundation.CGFloat : VisxSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
@_hasMissingDesignatedInitializers public class ConstraintMakerRelatable {
  @discardableResult
  public func equalTo(_ other: any VisxSDK.ConstraintRelatableTarget, _ file: Swift.String = #file, _ line: Swift.UInt = #line) -> VisxSDK.ConstraintMakerEditable
  @discardableResult
  public func equalToSuperview(_ file: Swift.String = #file, _ line: Swift.UInt = #line) -> VisxSDK.ConstraintMakerEditable
  @discardableResult
  public func lessThanOrEqualTo(_ other: any VisxSDK.ConstraintRelatableTarget, _ file: Swift.String = #file, _ line: Swift.UInt = #line) -> VisxSDK.ConstraintMakerEditable
  @discardableResult
  public func lessThanOrEqualToSuperview(_ file: Swift.String = #file, _ line: Swift.UInt = #line) -> VisxSDK.ConstraintMakerEditable
  @discardableResult
  public func greaterThanOrEqualTo(_ other: any VisxSDK.ConstraintRelatableTarget, _ file: Swift.String = #file, line: Swift.UInt = #line) -> VisxSDK.ConstraintMakerEditable
  @discardableResult
  public func greaterThanOrEqualToSuperview(_ file: Swift.String = #file, line: Swift.UInt = #line) -> VisxSDK.ConstraintMakerEditable
  @objc deinit
}
public struct ConstraintPriority : Swift.ExpressibleByFloatLiteral, Swift.Equatable, Swift.Strideable {
  public typealias FloatLiteralType = Swift.Float
  public let value: Swift.Float
  public init(floatLiteral value: Swift.Float)
  public init(_ value: Swift.Float)
  public static var required: VisxSDK.ConstraintPriority {
    get
  }
  public static var high: VisxSDK.ConstraintPriority {
    get
  }
  public static var medium: VisxSDK.ConstraintPriority {
    get
  }
  public static var low: VisxSDK.ConstraintPriority {
    get
  }
  public static func == (lhs: VisxSDK.ConstraintPriority, rhs: VisxSDK.ConstraintPriority) -> Swift.Bool
  public func advanced(by n: VisxSDK.ConstraintPriority.FloatLiteralType) -> VisxSDK.ConstraintPriority
  public func distance(to other: VisxSDK.ConstraintPriority) -> VisxSDK.ConstraintPriority.FloatLiteralType
  public typealias Stride = VisxSDK.ConstraintPriority.FloatLiteralType
}
@available(iOS 11.0, tvOS 11.0, *)
public typealias ConstraintDirectionalInsets = UIKit.NSDirectionalEdgeInsets
@available(iOS 8.0, *)
public struct ConstraintLayoutSupportDSL : VisxSDK.ConstraintDSL {
  public var target: Swift.AnyObject? {
    get
  }
  public var top: VisxSDK.ConstraintItem {
    get
  }
  public var bottom: VisxSDK.ConstraintItem {
    get
  }
  public var height: VisxSDK.ConstraintItem {
    get
  }
}
extension VisxSDK.ConstraintMakerRelatable {
  @discardableResult
  public func equalToSuperview<T>(_ closure: (VisxSDK.ConstraintView) -> T, _ file: Swift.String = #file, line: Swift.UInt = #line) -> VisxSDK.ConstraintMakerEditable where T : VisxSDK.ConstraintRelatableTarget
  @discardableResult
  public func lessThanOrEqualToSuperview<T>(_ closure: (VisxSDK.ConstraintView) -> T, _ file: Swift.String = #file, line: Swift.UInt = #line) -> VisxSDK.ConstraintMakerEditable where T : VisxSDK.ConstraintRelatableTarget
  @discardableResult
  public func greaterThanOrEqualTo<T>(_ closure: (VisxSDK.ConstraintView) -> T, _ file: Swift.String = #file, line: Swift.UInt = #line) -> VisxSDK.ConstraintMakerEditable where T : VisxSDK.ConstraintRelatableTarget
}
extension UIKit.UIView {
  @available(*, deprecated, renamed: "snp.left")
  @_Concurrency.MainActor(unsafe) public var snp_left: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.top")
  @_Concurrency.MainActor(unsafe) public var snp_top: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.right")
  @_Concurrency.MainActor(unsafe) public var snp_right: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.bottom")
  @_Concurrency.MainActor(unsafe) public var snp_bottom: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.leading")
  @_Concurrency.MainActor(unsafe) public var snp_leading: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.trailing")
  @_Concurrency.MainActor(unsafe) public var snp_trailing: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.width")
  @_Concurrency.MainActor(unsafe) public var snp_width: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.height")
  @_Concurrency.MainActor(unsafe) public var snp_height: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.centerX")
  @_Concurrency.MainActor(unsafe) public var snp_centerX: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.centerY")
  @_Concurrency.MainActor(unsafe) public var snp_centerY: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.baseline")
  @_Concurrency.MainActor(unsafe) public var snp_baseline: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  @available(*, deprecated, renamed: "snp.lastBaseline")
  @_Concurrency.MainActor(unsafe) public var snp_lastBaseline: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  @available(iOS, deprecated, renamed: "snp.firstBaseline")
  @_Concurrency.MainActor(unsafe) public var snp_firstBaseline: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.leftMargin")
  @_Concurrency.MainActor(unsafe) public var snp_leftMargin: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.topMargin")
  @_Concurrency.MainActor(unsafe) public var snp_topMargin: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.rightMargin")
  @_Concurrency.MainActor(unsafe) public var snp_rightMargin: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.bottomMargin")
  @_Concurrency.MainActor(unsafe) public var snp_bottomMargin: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.leadingMargin")
  @_Concurrency.MainActor(unsafe) public var snp_leadingMargin: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.trailingMargin")
  @_Concurrency.MainActor(unsafe) public var snp_trailingMargin: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.centerXWithinMargins")
  @_Concurrency.MainActor(unsafe) public var snp_centerXWithinMargins: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.centerYWithinMargins")
  @_Concurrency.MainActor(unsafe) public var snp_centerYWithinMargins: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.edges")
  @_Concurrency.MainActor(unsafe) public var snp_edges: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.size")
  @_Concurrency.MainActor(unsafe) public var snp_size: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.center")
  @_Concurrency.MainActor(unsafe) public var snp_center: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.margins")
  @_Concurrency.MainActor(unsafe) public var snp_margins: VisxSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.centerWithinMargins")
  @_Concurrency.MainActor(unsafe) public var snp_centerWithinMargins: VisxSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.prepareConstraints(_:)")
  @_Concurrency.MainActor(unsafe) public func snp_prepareConstraints(_ closure: (_ make: VisxSDK.ConstraintMaker) -> Swift.Void) -> [VisxSDK.Constraint]
  @available(*, deprecated, renamed: "snp.makeConstraints(_:)")
  @_Concurrency.MainActor(unsafe) public func snp_makeConstraints(_ closure: (_ make: VisxSDK.ConstraintMaker) -> Swift.Void)
  @available(*, deprecated, renamed: "snp.remakeConstraints(_:)")
  @_Concurrency.MainActor(unsafe) public func snp_remakeConstraints(_ closure: (_ make: VisxSDK.ConstraintMaker) -> Swift.Void)
  @available(*, deprecated, renamed: "snp.updateConstraints(_:)")
  @_Concurrency.MainActor(unsafe) public func snp_updateConstraints(_ closure: (_ make: VisxSDK.ConstraintMaker) -> Swift.Void)
  @available(*, deprecated, renamed: "snp.removeConstraints()")
  @_Concurrency.MainActor(unsafe) public func snp_removeConstraints()
  @_Concurrency.MainActor(unsafe) public var snp: VisxSDK.ConstraintViewDSL {
    get
  }
}
public protocol ConstraintConstantTarget {
}
extension CoreFoundation.CGPoint : VisxSDK.ConstraintConstantTarget {
}
extension CoreFoundation.CGSize : VisxSDK.ConstraintConstantTarget {
}
extension UIKit.UIEdgeInsets : VisxSDK.ConstraintConstantTarget {
}
@available(iOS 11.0, tvOS 11.0, *)
extension UIKit.NSDirectionalEdgeInsets : VisxSDK.ConstraintConstantTarget {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(VisxTableViewCell) @_Concurrency.MainActor(unsafe) public class VisxTableViewCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor(unsafe) public static let visxCellIdentifier: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public func showAd(adView: VisxSDK.VisxAdView, tableView: UIKit.UITableView)
  @objc deinit
}
@objc extension UIKit.UITableView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func dequeueVisxCell(for indexPath: Foundation.IndexPath, reuseIdentifier: Swift.String) -> VisxSDK.VisxTableViewCell
}
public typealias ConstraintView = UIKit.UIView
@_inheritsConvenienceInitializers @objc(VisxCollectionViewCell) @_Concurrency.MainActor(unsafe) public class VisxCollectionViewCell : UIKit.UICollectionViewCell {
  @objc @_Concurrency.MainActor(unsafe) public static let visxCellIdentifier: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public func showAd(adView: VisxSDK.VisxAdView, collectionView: UIKit.UICollectionView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc extension UIKit.UICollectionView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func dequeueVisxCell(for indexPath: Foundation.IndexPath, reuseIdentifier: Swift.String) -> VisxSDK.VisxCollectionViewCell
}
public protocol LoadMediationDelegate : AnyObject {
  func loadMediationAd(_ mediation: VisxSDK.Mediation, adView: VisxSDK.VisxAdView, customTargeting: [Swift.String : Swift.String]?)
}
@available(*, deprecated, message: "Use ConstraintMakerPrioritizable instead.")
public typealias ConstraintMakerPriortizable = VisxSDK.ConstraintMakerPrioritizable
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConstraintMakerPrioritizable : VisxSDK.ConstraintMakerFinalizable {
  @discardableResult
  public func priority(_ amount: VisxSDK.ConstraintPriority) -> VisxSDK.ConstraintMakerFinalizable
  @discardableResult
  public func priority(_ amount: any VisxSDK.ConstraintPriorityTarget) -> VisxSDK.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.required) instead.")
  @discardableResult
  public func priorityRequired() -> VisxSDK.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.high) instead.")
  @discardableResult
  public func priorityHigh() -> VisxSDK.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.medium) instead.")
  @discardableResult
  public func priorityMedium() -> VisxSDK.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.low) instead.")
  @discardableResult
  public func priorityLow() -> VisxSDK.ConstraintMakerFinalizable
  @objc deinit
}
@available(iOS 9.0, *)
public typealias ConstraintLayoutGuide = UIKit.UILayoutGuide
public typealias ConstraintInterfaceLayoutDirection = UIKit.UIUserInterfaceLayoutDirection
public struct ConstraintConfig {
  public static var interfaceLayoutDirection: VisxSDK.ConstraintInterfaceLayoutDirection
}
@objc public protocol VisxAdViewDelegate {
  @objc func viewControllerForPresentingVisxAdView() -> UIKit.UIViewController
  @objc func visxAdViewDidInitialize(visxAdView: VisxSDK.VisxAdView, effect: VisxSDK.VisxPlacementEffect)
  @objc optional func visxAdRequestStarted(visxAdView: VisxSDK.VisxAdView)
  @objc optional func visxAdResponseReceived(visxAdView: VisxSDK.VisxAdView, price: Foundation.Decimal, currency: Swift.String)
  @objc optional func visxAdFailedWithError(visxAdView: VisxSDK.VisxAdView, message: Swift.String, code: Swift.Int)
  @objc optional func visxAdViewSizeChange(visxAdView: VisxSDK.VisxAdView, width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat)
  @objc optional func visxAdViewEffectChange(visxAdView: VisxSDK.VisxAdView, effect: VisxSDK.VisxPlacementEffect)
  @objc optional func visxAdViewClosed(visxAdView: VisxSDK.VisxAdView)
  @objc optional func visxAdViewClicked(visxAdView: VisxSDK.VisxAdView)
  @objc optional func visxLandingPageOpened()
  @objc optional func appShouldSuspendForAd(visxAdView: VisxSDK.VisxAdView)
  @objc optional func appShouldResumeFromAd(visxAdView: VisxSDK.VisxAdView)
  @objc optional func visxAdVideoFinished(visxAdView: VisxSDK.VisxAdView)
  @objc optional func visxAdInterstitialWillBeClosed(visxAdView: VisxSDK.VisxAdView)
  @objc optional func visxAdInterstitialClosed(visxAdView: VisxSDK.VisxAdView)
  @objc optional func visxAdStickyOpened(visxAdView: VisxSDK.VisxAdView)
  @objc optional func visxAdStickyWillBeClosed(visxAdView: VisxSDK.VisxAdView)
  @objc optional func visxAdStickyClosed(visxAdView: VisxSDK.VisxAdView)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConstraintMakerExtendable : VisxSDK.ConstraintMakerRelatable {
  public var left: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var top: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var bottom: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var right: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var leading: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var trailing: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var width: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var height: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var centerX: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var centerY: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(*, deprecated, renamed: "lastBaseline")
  public var baseline: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var lastBaseline: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  public var firstBaseline: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leftMargin: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var rightMargin: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var topMargin: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var bottomMargin: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leadingMargin: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var trailingMargin: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerXWithinMargins: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerYWithinMargins: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var edges: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var horizontalEdges: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var verticalEdges: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var directionalEdges: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var directionalHorizontalEdges: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var directionalVerticalEdges: VisxSDK.ConstraintMakerExtendable {
    get
  }
  public var size: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var margins: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var directionalMargins: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerWithinMargins: VisxSDK.ConstraintMakerExtendable {
    get
  }
  @objc deinit
}
public protocol LayoutConstraintItem : AnyObject {
}
@available(iOS 9.0, macOS 10.11, *)
extension UIKit.UILayoutGuide : VisxSDK.LayoutConstraintItem {
}
extension UIKit.UIView : VisxSDK.LayoutConstraintItem {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConstraintMakerEditable : VisxSDK.ConstraintMakerPrioritizable {
  @discardableResult
  public func multipliedBy(_ amount: any VisxSDK.ConstraintMultiplierTarget) -> VisxSDK.ConstraintMakerEditable
  @discardableResult
  public func dividedBy(_ amount: any VisxSDK.ConstraintMultiplierTarget) -> VisxSDK.ConstraintMakerEditable
  @discardableResult
  public func offset(_ amount: any VisxSDK.ConstraintOffsetTarget) -> VisxSDK.ConstraintMakerEditable
  @discardableResult
  public func inset(_ amount: any VisxSDK.ConstraintInsetTarget) -> VisxSDK.ConstraintMakerEditable
  @available(iOS 11.0, tvOS 11.0, *)
  @discardableResult
  public func inset(_ amount: any VisxSDK.ConstraintDirectionalInsetTarget) -> VisxSDK.ConstraintMakerEditable
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor(unsafe) public class VisxAdView : UIKit.UIView, UIKit.UIScrollViewDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var isMediationAdView: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var adUnit: Swift.String {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var hasMessageAbove: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var callbackHandler: VisxSDK.VisxAdCallbackHandler?
  @objc @_Concurrency.MainActor(unsafe) public var viewControllerForPresenting: UIKit.UIViewController?
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToSuperview()
}
@_hasMissingDesignatedInitializers final public class ConstraintItem {
  @objc deinit
}
public func == (lhs: VisxSDK.ConstraintItem, rhs: VisxSDK.ConstraintItem) -> Swift.Bool
extension VisxSDK.VisxAdView {
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(adUnit: Swift.String, adSize: CoreFoundation.CGSize, fixedSize: Swift.Bool = false, viewControllerForPresenting: UIKit.UIViewController? = nil, interstitial: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(adUnit: Swift.String, adViewDelegate: any VisxSDK.VisxAdViewDelegate, adSize: CoreFoundation.CGSize, fixedSize: Swift.Bool = false, interstitial: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) convenience dynamic public init(adUnit: Swift.String, adViewDelegate: any VisxSDK.VisxAdViewDelegate, interstitial: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getSdkVersion() -> Swift.String
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setAnchorFrame(with anchorX: Swift.Double, _ anchorY: Swift.Double, _ anchorWidth: Swift.Double, _ anchorHeight: Swift.Double)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func load()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func loadWithCustomTargetingParameters(params: [Swift.String : Swift.String])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func advertisingLabelText(label: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func deallocAdView()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getCreativeInScrollview(scroll: UIKit.UIScrollView) -> UIKit.UIView
  @objc @_Concurrency.MainActor(unsafe) dynamic public func getReactiveCreative() -> UIKit.UIView?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func showInterstitial()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func showInterstitialFromViewController(controller: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func isInterstitial() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setInterstitialBackgroundColor(color: UIKit.UIColor)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func renderAdIfHeaderBiddingEnabled()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addFriendlyObstraction(view: UIKit.UIView, detailedReason: Swift.String)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addFriendlyObstraction(viewsAndReasons: [UIKit.UIView : Swift.String])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func adViewDidReceiveAd(bannerView: UIKit.UIView)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func didFailToReceiveAdWithError(bannerView: UIKit.UIView, error: Foundation.NSError)
}
extension VisxSDK.VisxDeviceModel : Swift.Equatable {}
extension VisxSDK.VisxDeviceModel : Swift.Hashable {}
extension VisxSDK.VisxDeviceModel : Swift.RawRepresentable {}
extension VisxSDK.VisxPlacementType : Swift.Equatable {}
extension VisxSDK.VisxPlacementType : Swift.Hashable {}
extension VisxSDK.VisxPlacementType : Swift.RawRepresentable {}
extension VisxSDK.VisxPlacementEffect : Swift.Equatable {}
extension VisxSDK.VisxPlacementEffect : Swift.Hashable {}
extension VisxSDK.VisxPlacementEffect : Swift.RawRepresentable {}
